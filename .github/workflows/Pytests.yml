name: Run Tests

on:
  push:
  pull_request:
    branches: ["master"]

env:
  PY_COLORS: 1

jobs:
  build:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-latest", "macOS-latest" ]
        python-version: [ "3.8", "3.9", "3.10", "3.11" ]

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }} 🐍
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup System & Info 💻
        run: |
          python -c "from multiprocessing import cpu_count ; print('cpu_count={}'.format(cpu_count()))"

          if [ "$RUNNER_OS" == "macOS" ]; then
              echo "***************************"
              system_profiler SPHardwareDataType
              echo "***************************"
          elif [ "$RUNNER_OS" == "Linux" ]; then
              echo "***************************"          
              lscpu | egrep 'Model name|Socket|Thread|NUMA|CPU\\(s\\)'
              lshw -short -C memory || true  # lshw might not be installed
              echo "***************************"
          fi

          # Add useful paths to environment for next steps
          echo "PATH=$PATH:/Users/runner/Library/Python/${{ matrix.python-version }}/bin" >> $GITHUB_ENV
          echo "PATH=$PATH:/Users/runner/.local/bin" >> $GITHUB_ENV
          echo "PATH=$PATH:~/.local/bin/" >> $GITHUB_ENV

          python3 --version
          python --version
          ls -la ~

      - name: Setup SSH 🔐
        run: |
          mkdir -p ~/.ssh
          rm -f ~/.ssh/id_rsa || true

          if [ "$RUNNER_OS" == "macOS" ]; then
            chmod g-w ~/.ssh
            chmod o-w ~/.ssh
          elif [ "$RUNNER_OS" == "Linux" ]; then
            chmod g-w $HOME
            chmod o-w $HOME
          fi

      - name: Install Python Dependencies 📥
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade \
            ruamel.yaml \
            pytest \
            pycodestyle \
            pep8 \
            pytest-timeout \
            rich \
            beartype \
            fabric2 \
            PyYAML \
            isort

      - name: Setup FabSim 🚦
        run: |
          python3 configure_fabsim.py

          # Set environment variables for next steps
          echo "PATH=$(pwd)/fabsim/bin:$PATH" >> $GITHUB_ENV
          echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

      - name: Install FabDummy Plugin
        env:
          PATH: ${{ github.workspace }}/fabsim/bin:${{ env.PATH }}
          PYTHONPATH: ${{ github.workspace }}
        run: |
          ./fabsim/bin/fabsim localhost install_plugin:FabDummy
          pip freeze

      - name: Test with pytest 🚀
        env:
          PATH: ${{ github.workspace }}/fabsim/bin:${{ env.PATH }}
          PYTHONPATH: ${{ github.workspace }}
        run: |
          # Verify environment
          which fabsim || echo "fabsim not found in PATH"
          echo "PATH: $PATH"
          echo "PYTHONPATH: $PYTHONPATH"
          
          python3 -m pytest --timeout=60 -vv --log-cli-level=10 tests/
          pycodestyle fabsim/base/ fabsim/deploy/ fabsim/lib/ fabsim/UQP/ fabsim/VVP/

      - name: Run isort 🚀
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          isort --profile hug --check --diff -l 80 fabsim/
